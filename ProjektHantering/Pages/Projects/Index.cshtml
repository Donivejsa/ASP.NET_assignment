@page
@using static ProjektHantering.Models.Project
@model ProjektHantering.Pages.Projects.IndexModel
@{
}

<div class="projects-header">
    <h1>Projects</h1>
    <button id="addProjectButton" class="btn btn-primary">
        <i class="bi bi-plus"></i> Add Project
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="projects-tabs">
    <a href="#" class="projects-tab @(Model.CurrentFilter == null ? "active" : "")" data-filter="all">ALL (@Model.AllCount)</a>
    <a href="#" class="projects-tab @(Model.CurrentFilter == "inprogress" ? "active" : "")" data-filter="inprogress">STARTED (@Model.InProgressCount)</a>
    <a href="#" class="projects-tab @(Model.CurrentFilter == "completed" ? "active" : "")" data-filter="completed">COMPLETED (@Model.CompletedCount)</a>
</div>

<div class="projects-grid" id="projectsContainer">
    @foreach (var project in Model.Projects)
    {
        <div class="project-card" data-status="@project.Status.ToString().ToLowerInvariant()">
            <div class="project-card-header">
                <div class="project-title-row">
                    <div class="project-logo">
                        <img src="~/images/project.png" alt="Project icon" />
                    </div>
                    <div class="project-info">
                        <h3 class="project-title">@project.Name</h3>
                        <div class="project-client">
                            @(string.IsNullOrEmpty(project.ClientName) ? "No Client" : project.ClientName)
                            <span class="status-badge @(project.Status == ProjectStatus.InProgress ? "status-inprogress" : "status-completed")">
                                @(project.Status == ProjectStatus.InProgress ? "In Progress" : "Completed")
                            </span>
                        </div>
                    </div>
                </div>
                <div class="project-actions">
                    <button class="project-actions-button" onclick="toggleActionMenu(this)">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="project-actions-menu">
                        <div class="project-actions-item edit" onclick="editProject(@project.Id)">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </div>
                        <div class="project-actions-item delete" onclick="deleteProject(@project.Id)">
                            <i class="bi bi-trash"></i>
                            Delete Project
                        </div>
                    </div>
                </div>
            </div>
            <div class="project-card-body">
                <div class="project-description">
                    @(project.Description.Length > 100 ? project.Description.Substring(0, 100) + "..." : project.Description)
                </div>
            </div>
        </div>
    }
</div>

<!-- Add Project Model -->
<div id="addProjectModal" class="modal-backdrop">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Add Project</h3>
            <button class="modal-close" onclick="closeModal('addProjectModal')">×</button>
        </div>
        <form id="addProjectForm" method="post">
            <div class="modal-body">
                <div class="modal-logo">
                    <img src="~/images/project.png" alt="Project icon" />
                </div>

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="ProjectInput.Name" class="form-label">Project Name</label>
                    <input asp-for="ProjectInput.Name" class="form-control" placeholder="Project Name" />
                    <span asp-validation-for="ProjectInput.Name" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="ProjectInput.ClientName" class="form-label">Client Name</label>
                    <input asp-for="ProjectInput.ClientName" class="form-control" placeholder="Client Name" />
                </div>

                <div class="form-group">
                    <label asp-for="ProjectInput.Description" class="form-label">Description</label>

                    <textarea asp-for="ProjectInput.Description" class="form-textfield" rows="4" placeholder="Type something"></textarea>
                    <span asp-validation-for="ProjectInput.Description" class="text-danger"></span>
                    <div class="toolbar">
                        <button type="button" class="toolbar-button"><i class="bi bi-type-bold"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-type-italic"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-type-underline"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-left"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-center"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-right"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-list-ul"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-list-ol"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-link"></i></button>
                    </div>
                </div>

                <div class="date-inputs">
                    <div class="date-input-group">
                        <label asp-for="ProjectInput.StartDate" class="form-label">Start Date</label>
                        <input asp-for="ProjectInput.StartDate" type="date" class="date-picker" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="ProjectInput.StartDate" class="text-danger"></span>
                    </div>

                    <div class="date-input-group">
                        <label asp-for="ProjectInput.EndDate" class="form-label">End Date</label>
                        <input asp-for="ProjectInput.EndDate" type="date" class="date-picker" />
                        <span asp-validation-for="ProjectInput.EndDate" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group" style="margin-top: 15px;">
                    <label asp-for="ProjectInput.Budget" class="form-label">Budget</label>
                    <div class="budget-input">
                        <span>$</span>
                        <input asp-for="ProjectInput.Budget" type="number" value="0" min="0" step="0.01" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal('addProjectModal')">Cancel</button>
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Project Model -->
<div id="editProjectModal" class="modal-backdrop">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Edit Project</h3>
            <button class="modal-close" onclick="closeModal('editProjectModal')">×</button>
        </div>
        <form id="editProjectForm" method="post" asp-page-handler="Edit">
            <div class="modal-body">
                <div class="modal-logo">
                    <img src="~/images/project.png" alt="Project icon" />
                </div>

                <input type="hidden" id="editProjectId" name="Id" />
                <input type="hidden" id="editProjectUserId" name="UserId" />

                <div class="form-group">
                    <label class="form-label">Project Name</label>
                    <input type="text" class="form-control" id="editProjectName" name="Name" placeholder="Project Name" />
                </div>

                <div class="form-group">
                    <label class="form-label">Client Name</label>
                    <input type="text" class="form-control" id="editClientName" name="ClientName" placeholder="Client Name" />
                </div>

                <div class="form-group">
                    <label class="form-label">Description</label>
                    <div class="toolbar">
                        <button type="button" class="toolbar-button"><i class="bi bi-type-bold"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-type-italic"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-type-underline"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-left"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-center"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-text-right"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-list-ul"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-list-ol"></i></button>
                        <button type="button" class="toolbar-button"><i class="bi bi-link"></i></button>
                    </div>
                    <textarea class="form-textfield" id="editProjectDescription" name="Description" rows="4" placeholder="Type something"></textarea>
                </div>

                <div class="date-inputs">
                    <div class="date-input-group">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="date-picker" id="editStartDate" name="StartDate" />
                    </div>

                    <div class="date-input-group">
                        <label class="form-label">End Date</label>
                        <input type="date" class="date-picker" id="editEndDate" name="EndDate" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Status</label>
                    <select id="editProjectStatus" name="Status" class="form-select">
                        <option value="0">In Progress</option>
                        <option value="1">Completed</option>
                    </select>
                </div>

                <div class="form-group" style="margin-top: 15px;">
                    <label class="form-label">Budget</label>
                    <div class="budget-input">
                        <span>$</span>
                        <input type="number" id="editBudget" name="Budget" value="0" min="0" step="0.01" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal('editProjectModal')">Cancel</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Show/hide project actions menu
        function toggleActionMenu(button) {
            const menu = button.nextElementSibling;
            menu.classList.toggle('show');

            // Close other menus
            document.querySelectorAll('.project-actions-menu.show').forEach(item => {
                if (item !== menu) {
                    item.classList.remove('show');
                }
            });

            // Close menu when clicking elsewhere
            document.addEventListener('click', function closeMenu(e) {
                if (!button.contains(e.target) && !menu.contains(e.target)) {
                    menu.classList.remove('show');
                    document.removeEventListener('click', closeMenu);
                }
            });
        }

        // Add Project Model
        const addProjectButton = document.getElementById('addProjectButton');
        const addProjectModal = document.getElementById('addProjectModal');

        addProjectButton.addEventListener('click', function() {
            addProjectModal.classList.add('show');
        });

        // Filter projects
        const projectTabs = document.querySelectorAll('.projects-tab');
        const projectCards = document.querySelectorAll('.project-card');

        projectTabs.forEach(tab => {
            tab.addEventListener('click', function(e) {
                e.preventDefault();

                const filter = this.dataset.filter;

                // Update active tab
                projectTabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');

                // Update URL with filter parameter
                const url = new URL(window.location.href);
                if (filter === 'all') {
                    url.searchParams.delete('filter');
                } else {
                    url.searchParams.set('filter', filter);
                }
                window.history.pushState({}, '', url);

                // Apply filter
                if (filter === 'all') {
                    projectCards.forEach(card => card.style.display = 'block');
                } else {
                    projectCards.forEach(card => {
                        if (card.dataset.status === filter) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                }
            });
        });

        // Close models
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // Edit project function
        async function editProject(id) {
            try {
                console.log(`Fetching project with id: ${id}`);
                const response = await fetch(`/api/projects/${id}`);

                if (!response.ok) {
                    console.error(`Server responded with status: ${response.status}`);
                    throw new Error('Failed to fetch project');
                }

                const project = await response.json();
                console.log('Project data received:', project);

                // Populate edit form
                document.getElementById('editProjectId').value = project.id;
                document.getElementById('editProjectUserId').value = project.userId;
                document.getElementById('editProjectName').value = project.name;
                document.getElementById('editClientName').value = project.clientName || '';
                document.getElementById('editProjectDescription').value = project.description;
                document.getElementById('editStartDate').value = new Date(project.startDate).toISOString().split('T')[0];
                document.getElementById('editEndDate').value = project.endDate ? new Date(project.endDate).toISOString().split('T')[0] : '';
                document.getElementById('editBudget').value = parseFloat(project.budget || 0).toFixed(2);
                document.getElementById('editProjectStatus').value = project.status;

                // Show modal
                console.log('Opening edit modal');
                document.getElementById('editProjectModal').classList.add('show');

            } catch (error) {
                console.error('Error in editProject function:', error);
                alert('Could not load project details: ' + error.message);
            }
        }

        // Delete project function
        function deleteProject(id) {
            if (confirm('Are you sure you want to delete this project?')) {
                fetch(`/api/projects/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to delete project');
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Could not delete project');
                });
            }
        }

        // Debug form submission
        document.getElementById('editProjectForm').addEventListener('submit', function(event) {
            console.log('Submitting edit form...');
            console.log('Budget value:', document.getElementById('editBudget').value);
            console.log('Status value:', document.getElementById('editProjectStatus').value);
        });
    </script>
}